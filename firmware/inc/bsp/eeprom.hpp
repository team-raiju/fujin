#pragma once

#include <cstdint>

namespace bsp::eeprom {

/// @section Custom types

enum EepromResult {
    OK,
    ERROR,
    DATA_NOT_FOUND,
};

typedef enum : uint16_t {
    ADDR_MEMORY_CLEAR = 0x0000,

    // PARAMS 0x0004 ~ 0x0FFF
    ADDR_FAN_SPEED = 0x0004,
    ADDR_ANGULAR_KP = 0x0008,
    ADDR_ANGULAR_KI = 0x000C,
    ADDR_ANGULAR_KD = 0x0010,
    ADDR_WALL_KP = 0x0014,
    ADDR_WALL_KI = 0x0018,
    ADDR_WALL_KD = 0x001C,
    ADDR_LINEAR_VEL_KP = 0x0020,
    ADDR_LINEAR_VEL_KI = 0x0024,
    ADDR_LINEAR_VEL_KD = 0x0028,
    ADDR_DIAGONAL_WALLS_KP = 0x002C,
    ADDR_DIAGONAL_WALLS_KI = 0x0030,
    ADDR_DIAGONAL_WALLS_KD = 0x0034,
    ADDR_MIN_MOVE_SPEED = 0x0038,

    ADDR_IR_WALL_DIST_REF_RIGHT = 0x003C,
    ADDR_IR_WALL_DIST_REF_FRONT_LEFT = 0x0040,
    ADDR_IR_WALL_DIST_REF_FRONT_RIGHT = 0x0044,
    ADDR_IR_WALL_DIST_REF_LEFT = 0x0048,
    ADDR_IR_WALL_CONTROL_TH_RIGHT = 0x004C,
    ADDR_IR_WALL_CONTROL_TH_FRONT_LEFT = 0x0050,
    ADDR_IR_WALL_CONTROL_TH_FRONT_RIGHT = 0x0054,
    ADDR_IR_WALL_CONTROL_TH_LEFT = 0x0058,
    ADDR_IR_WALL_DETECT_TH_RIGHT = 0x005C,
    ADDR_IR_WALL_DETECT_TH_FRONT_LEFT = 0x0060,
    ADDR_IR_WALL_DETECT_TH_FRONT_RIGHT = 0x0064,
    ADDR_IR_WALL_DETECT_TH_LEFT = 0x0068,

    ADDR_Z_IMU_BIAS = 0x006C,

    ADDR_START_WALL_BREAK_CM_LEFT = 0x0070,
    ADDR_START_WALL_BREAK_CM_RIGHT = 0x0074,
    ADDR_ENABLE_WALL_BREAK_CORRECTION = 0x0078,

    // FOWARD PARAMS 0x1400 ~ 0x1600
    ADDR_FORWARD_PARAMS_START = 0x1400,
    ADDR_FORWARD_PARAMS_FOWARD = 0x1410,
    ADDR_FORWARD_PARAMS_DIAGONAL = 0x1420,
    ADDR_FORWARD_PARAMS_STOP = 0x1430,
    ADDR_FORWARD_PARAMS_TURN_AROUND = 0x1440,
    ADDR_FORWARD_PARAMS_RIGHT_45_FROM_45 = 0x1450,
    ADDR_FORWARD_PARAMS_LEFT_45_FROM_45 = 0x1460,
    ADDR_FORWARD_PARAMS_RIGHT_90_FROM_45 = 0x1470,
    ADDR_FORWARD_PARAMS_LEFT_90_FROM_45 = 0x1480,
    ADDR_FORWARD_PARAMS_RIGHT_135_FROM_45 = 0x1490,
    ADDR_FORWARD_PARAMS_LEFT_135_FROM_45 = 0x14A0,
    ADDR_FORWARD_PARAMS_RIGHT_90_SEARCH = 0x14B0,
    ADDR_FORWARD_PARAMS_LEFT_90_SEARCH = 0x14C0,
    ADDR_FORWARD_PARAMS_TURN_AROUND_INPLACE = 0x14D0,
    ADDR_FORWARD_PARAMS_RIGHT_90 = 0x14E0,
    ADDR_FORWARD_PARAMS_LEFT_90 = 0x14F0,
    ADDR_FORWARD_PARAMS_RIGHT_45 = 0x1500,
    ADDR_FORWARD_PARAMS_LEFT_45 = 0x1510,
    ADDR_FORWARD_PARAMS_RIGHT_135 = 0x1520,
    ADDR_FORWARD_PARAMS_LEFT_135 = 0x1530,
    ADDR_FORWARD_PARAMS_RIGHT_180 = 0x1540,
    ADDR_FORWARD_PARAMS_LEFT_180 = 0x1550,

    // TURN PARAMS 0x1600 ~ 0x1900
    ADDR_TURN_PARAMS_RIGHT_45 = 0x1600,
    ADDR_TURN_PARAMS_LEFT_45 = 0x1620,
    ADDR_TURN_PARAMS_RIGHT_90 = 0x1640,
    ADDR_TURN_PARAMS_LEFT_90 = 0x1660,
    ADDR_TURN_PARAMS_RIGHT_135 = 0x1680,
    ADDR_TURN_PARAMS_LEFT_135 = 0x16A0,
    ADDR_TURN_PARAMS_RIGHT_180 = 0x16C0,
    ADDR_TURN_PARAMS_LEFT_180 = 0x16E0,
    ADDR_TURN_PARAMS_RIGHT_45_FROM_45 = 0x1700,
    ADDR_TURN_PARAMS_LEFT_45_FROM_45 = 0x1720,
    ADDR_TURN_PARAMS_RIGHT_90_FROM_45 = 0x1740,
    ADDR_TURN_PARAMS_LEFT_90_FROM_45 = 0x1760,
    ADDR_TURN_PARAMS_RIGHT_135_FROM_45 = 0x1780,
    ADDR_TURN_PARAMS_LEFT_135_FROM_45 = 0x17A0,
    ADDR_TURN_PARAMS_TURN_AROUND = 0x17C0,
    ADDR_TURN_PARAMS_RIGHT_90_SEARCH_MODE = 0x17E0,
    ADDR_TURN_PARAMS_LEFT_90_SEARCH_MODE = 0x1800,
    ADDR_TURN_PARAMS_TURN_AROUND_INPLACE = 0x1820,

    // MOVE SEQUENCE 0x2000 ~ 0x2100
    ADDR_MOVE_SEQUENCE_1 = 0x2000,
    ADDR_MOVE_SEQUENCE_2 = 0x2001,
    ADDR_MOVE_SEQUENCE_3 = 0x2002,
    ADDR_MOVE_SEQUENCE_4 = 0x2003,
    ADDR_MOVE_SEQUENCE_5 = 0x2004,
    ADDR_MOVE_SEQUENCE_6 = 0x2005,
    ADDR_MOVE_SEQUENCE_7 = 0x2006,
    ADDR_MOVE_SEQUENCE_8 = 0x2007,
    ADDR_MOVE_SEQUENCE_9 = 0x2008,
    ADDR_MOVE_SEQUENCE_10 = 0x2009,
    ADDR_MOVE_SEQUENCE_11 = 0x200A,
    ADDR_MOVE_SEQUENCE_12 = 0x200B,
    ADDR_MOVE_SEQUENCE_13 = 0x200C,
    ADDR_MOVE_SEQUENCE_14 = 0x200D,
    ADDR_MOVE_SEQUENCE_15 = 0x200E,
    ADDR_MOVE_SEQUENCE_16 = 0x200F,
    ADDR_MOVE_SEQUENCE_17 = 0x2010,
    ADDR_MOVE_SEQUENCE_18 = 0x2011,

    // MAZE 0x3000 ~ 0x4000
    ADDR_MAZE_START = 0x3000,

    // MAZE_BACKUP 0x4000 ~ 0x5000
    ADDR_MAZE_BACKUP_START = 0x4000,

    ADDR_MAX = 0xFFFF,
} param_addresses_t;

struct ParamInfo {
    uint16_t address;
    const char* name;
};

// Initialize the array with address-name pairs
const ParamInfo paramInfoArray[] = {
    {ADDR_MEMORY_CLEAR, "ADDR_MEMORY_CLEAR"},
    {ADDR_FAN_SPEED, "ADDR_FAN_SPEED"},
    {ADDR_ANGULAR_KP, "ADDR_ANGULAR_KP"},
    {ADDR_ANGULAR_KI, "ADDR_ANGULAR_KI"},
    {ADDR_ANGULAR_KD, "ADDR_ANGULAR_KD"},
    {ADDR_WALL_KP, "ADDR_WALL_KP"},
    {ADDR_WALL_KI, "ADDR_WALL_KI"},
    {ADDR_WALL_KD, "ADDR_WALL_KD"},
    {ADDR_LINEAR_VEL_KP, "ADDR_LINEAR_VEL_KP"},
    {ADDR_LINEAR_VEL_KI, "ADDR_LINEAR_VEL_KI"},
    {ADDR_LINEAR_VEL_KD, "ADDR_LINEAR_VEL_KD"},
    {ADDR_DIAGONAL_WALLS_KP, "ADDR_DIAGONAL_WALLS_KP"},
    {ADDR_DIAGONAL_WALLS_KI, "ADDR_DIAGONAL_WALLS_KI"},
    {ADDR_DIAGONAL_WALLS_KD, "ADDR_DIAGONAL_WALLS_KD"},
    {ADDR_MIN_MOVE_SPEED, "ADDR_MIN_MOVE_SPEED"},
    {ADDR_Z_IMU_BIAS, "ADDR_Z_IMU_BIAS"},
    {ADDR_START_WALL_BREAK_CM_LEFT, "ADDR_START_WALL_BREAK_CM_LEFT"},
    {ADDR_START_WALL_BREAK_CM_RIGHT, "ADDR_START_WALL_BREAK_CM_RIGHT"},
    {ADDR_ENABLE_WALL_BREAK_CORRECTION, "ADDR_ENABLE_WALL_BREAK_CORRECTION"}
};

/// @section Interface definition

EepromResult init(void);

EepromResult read_u8(uint16_t address, uint8_t* data);
EepromResult write_u8(uint16_t address, uint8_t data);
EepromResult read_u16(uint16_t address, uint16_t* data);
EepromResult write_u16(uint16_t address, uint16_t data);
EepromResult read_u32(uint16_t address, uint32_t* data);
EepromResult read_array(uint16_t address, uint8_t* data, uint16_t size);
EepromResult write_u32(uint16_t address, uint32_t data);
EepromResult write_array(uint16_t address, uint8_t* data, uint16_t size);

void clear(void);
void print_all(void);
const char* param_name(uint16_t address);

}
